{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\hrsaas(1)\\hrsaas\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\hrsaas(1)\\hrsaas\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Desktop\\hrsaas(1)\\hrsaas\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\hrsaas(1)\\hrsaas\\src\\views\\employees\\components\\job-info.vue?vue&type=template&id=126003e3&scoped=true&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\hrsaas(1)\\hrsaas\\src\\views\\employees\\components\\job-info.vue","mtime":1665882807561},{"path":"C:\\Users\\Administrator\\Desktop\\hrsaas(1)\\hrsaas\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1661678001124},{"path":"C:\\Users\\Administrator\\Desktop\\hrsaas(1)\\hrsaas\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1664288167520},{"path":"C:\\Users\\Administrator\\Desktop\\hrsaas(1)\\hrsaas\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1661678001124},{"path":"C:\\Users\\Administrator\\Desktop\\hrsaas(1)\\hrsaas\\node_modules\\vue-loader\\lib\\index.js","mtime":1664288167520}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}